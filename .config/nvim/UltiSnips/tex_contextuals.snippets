global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') != '0'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def sequences():
	# return True
	return False

def vector():
	# return True
	return False

def geometry():
	return True
	# return False

def probability():
	# return True
	return False

def bionomial():
	return math() and not geometry()

def coding():
	# return "haskell"
	# return "pascal"
	# return "ocaml"
	# return "assembly"
	# return "py"
	# return "c"
	# return "keiko"
	# return "scala"
	# return "x86"
	# return "arm"
	# return "console"
	return "algo"
	# return "verilog"
	# return "hcl"
	# return False

def env(names):
	decision = False
	if isinstance(names, str):
		names = [names]
	for name in names:
		[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
		decision = decision or (x != '0' and x != '0')
	return decision

endglobal


context "vector() and math()"
snippet '(r|T|W|V|N)' "math commands" wrA 
`!p
dic1=['r', 'T', 'N']
dic2=['V', 'W']
key=match.group(1)
if key in dic1:
	snip.rv = '\\bm{' + dic1[key] + '}'
elif key in dic2:
	snip.rv = '\\mathrm{' + dic2[key] + '}'
else:
	snip.rv = key
`
endsnippet

context "vector()"
snippet lintrans "linear transformation" iA
Let \(${1:V}\) be a vector space, and let \(T: V \to ${2:V}\) be a linear transformation $0
endsnippet


context "probability()"
snippet '(probspace|drv|crv)' "probability space" wrA
`!p
ps  = "Let \(\left(\Omega, \mathcal{F}, \mathbb{P}\\right)\) be a probability space"
drv = "Let \(X\) be a discrete random variable"
crv = "Let \(X\) be a continuous random variable"
dic = {"probspace":ps, "drv":drv, "crv":crv}
snip.rv = dic[match.group(1)] + " "
`
endsnippet

context "probability() and math()"
snippet '(E|P)' "exp and prob" irA
`!p snip.rv = "\mathbb{" + match.group(1) + "}"`
endsnippet

context "probability() and math()"
snippet '(f|F)' "exp and prob" irA
`!p snip.rv = match.group(1)`_{${1:X}}
endsnippet

# context "math()"
# snippet L1 "lebesque integrable space" iA
# \mathcal{L}^1\left(\mathbb{R}\right)
# endsnippet

context "geometry() and math()"
snippet < "angle" i
\angle 
endsnippet

priority 1000
context "env(['enumerate', 'itemize', 'description', 'arabicEnum', 'romanEnum', 'alphEnum'])"
snippet it "item" b
\item 
endsnippet


context "math()"
snippet fun "real function" iA
f : ${1:\mathbb{R}} \to \mathbb{R}: $0
endsnippet

# Binomial
context "bionomial()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)C' "normal binomial" wrA
{`!p snip.rv = match.group(1)` \choose $1}$0
endsnippet

priority 1000
context "bionomial()"
snippet '^.*\)C' "() binomial" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ")": 
		depth += 1
	if stripped[i] == "(": 
		depth -= 1
	if depth == 0 :
		break;
	i-=1
if stripped[-6:-1] == "right":
	snip.rv = stripped[0 : i-5] + "{" + stripped[i+1:-7] + " \\choose "
else:
	snip.rv = stripped[0 : i]   + "{" + stripped[i+1:-1] + " \\choose "
`$1}$0
endsnippet


context "math() and sequences()"
snippet '([abc])s' "auto subscript2" wrA
`!p snip.rv = "(" + match.group(1)`_{n})
endsnippet

# context "math() and sequences()"
# snippet 'a_{nd' "auto subscript2" wrA
# \text{ and 
# endsnippet

context "coding()"
snippet code "lstlisting" i
\begin{lstlisting}[style=my`!p snip.rv=coding()`]
$1
\end{lstlisting}
$0
endsnippet

context "coding()"
snippet codefile "lstlisting" i
\lstinputlisting[style=my`!p snip.rv=coding()`]{$1}
$0
endsnippet

context "coding()"
snippet lst "lstlisting" iA
\lstinline[style=my`!p snip.rv=coding()`]|${1:${VISUAL}}|$0
endsnippet
