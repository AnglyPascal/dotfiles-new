global !p

def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

dic = {
'bb':'mathbb', 'tt':'texttt', 'cal':'mathcal', 'frak':'mathfrak', 'bf':'bm',
'ol':'overline', 'ul':'underline', 'rm':'mathrm', 
'vec':'overrightarrow', 'conju':'overline',
'op':'operatorname',
'para':'parallel', 'ee':'exists', 'imp':'implies', 'trig':'triangle',
'arrowle':'leftrightarrow', '<=>':'Leftrightarrow', '=>':'Rightarrow',
'sigalg': '(\sigma\)-algebra', 'mto': 'mapsto',
'lsup':'limsup', 'linf':'liminf', 'sup':'sup', 'inf':'inf', 
'eq':'equiv', 'fa':'forall', 'null':'varnothing', '...':'dots ', 'ity':'infty',
'nin':'notin', '--': 'setminus', 'in':'in', '_in':'in', 'cong': 'cong',
'bull':'bullet', 'star':'star',
'qed':'qedhere', 
'var':'\\text{var}', 'cov':'\\text{cov}', 'det':'\\text{det}',

# greek alphabet
'alp': 'alpha', 'sig':'sigma', 'beta':'beta', 'del':'delta', 'pi':'pi',
'gam':'gamma', 'Gam':'Gamma', 'kap':'kappa', 'lam':'lambda', 'eps':'varepsilon', 'tau':'tau', 'rho':
'rho', 'chi':'chi', 'the':'theta', 'eta':  'eta', 'ome':'omega', 'Ome':'Omega', 'Tau':'Tau',
'Del':'Delta', 'zeta':'zeta', 'Phi':'Phi', 'Psi':'Psi', 'mu':'mu', 
'x_i':'xi', 

# exact matches
'perp':'^{\\perp}', 'circ':'\\circ', 'cdot': '\\cdot',
'st':'\\text{ such that, }', 'and':'\\text{ and }',
'or':'\\text{ or }', 'if':'\\text{ if }',
'as':'\\text{ as }', 'for':'\\text{ for }',
}

def f(key):
	if key in dic:
		return dic[key]
	else:
		return key

endglobal

context "math()"
snippet '\b(cal|bb)([A-Z])' "mathcal" wrA
`!p
key=match.group(1)
letter=match.group(2)
snip.rv = '\\' + f(key) + "{" + letter + "}"
`$0
endsnippet

context "math()"
snippet '\b(bf|vec|conju|tt|frak|tilde|hat|bar|ol)' "one input math commands" wrA
`!p
key=match.group(1)
snip.rv = '\\' + f(key)
`{$1}$0
endsnippet

context "math()" 
snippet '([^a-zA-Z\\])(ul|rm|op|ket|bra|braket|ketbra)' "one input commands" wrA
`!p
key=match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`{${1:${VISUAL}}}$0
endsnippet


context "math()"
snippet '([^\\a-zA-Z])(img|dist|to|ge|le|ne|pm|log|exp|sub|odot|cap|cup|sim|sin|cos|tan|ord|arg|gcd)' "math commands" wrA 
`!p
key=match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`
endsnippet

context "math()"
snippet '([^\\a-zA-Z])(qed|ts|ds|oplus|otimes|times|lsup|linf|sigalg|<=>|=>|imp|trig|para|ee|cong|bull|star|arrowle|mto)' "math commands" wrA 
`!p
key=match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`
endsnippet

context "math()"
snippet '([^\\a-zA-Z])(var|cov|det|max|min|dim|ker|deg|Ker|sup|inf)' "math commands" wrA 
`!p
key=match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`
endsnippet

context "math()"
snippet '([^\\a-zA-Z])(eq|--|fa|null|\.\.\.|ity|nin|in|_in)' "math commands" wrA 
`!p
key=match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`
endsnippet

context "math()"
snippet '([^\\a-zA-Z])([pP]hi|alp|iota|sig|[zb]eta|ell|[dD]el|[gG]am|kap|mu|eta|lam|eps|[tT]au|rho|pi|chi|the|[oO]me|[pP]si|x_i)' "greek letters " wrA
`!p 
key = match.group(2)
snip.rv = match.group(1) + '\\' + f(key)
`
endsnippet


context "math()"
snippet ddx "d/dx" iA
\frac{\mathrm{d}}{\mathrm{dx}}
endsnippet

context "math()"
snippet '([^d])dx' "d/dx" riA
`!p snip.rv=match.group(1)`\dx
endsnippet

context "math()"
snippet ddt "d/dx" iA
\frac{\mathrm{d}}{\mathrm{dt}}
endsnippet

context "math()"
snippet '_' "sub" riA
_{$1}$0
endsnippet

context "math()"
snippet part "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" wA
\sqrt{${1:${VISUAL}}}$0
endsnippet


context "math()"
snippet '([^\\a-zA-Z])(and|perp|circ|cdot|st|or|if|for|as)' "exact replace" wrA
`!p 
key = match.group(2)
snip.rv = match.group(1) + f(key)
`
endsnippet

context "math()"
snippet te "text" wA
\text{ $1 }$0
endsnippet

context "math()"
snippet '([^a-zA-Z])(int|\\int)' "integral" irA
`!p snip.rv=match.group(1)`\int_{$1}^{$2} $0
endsnippet
